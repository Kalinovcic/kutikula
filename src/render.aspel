package kutikula;

using aspel.cml.event;
using aspel.cml.video;
using aspel.text;

WINDOW_TITLE    :: "Kutikula\0"; // @Ugly - manually null-terminated

INITIAL_WINDOW_WIDTH    :: 800;
INITIAL_WINDOW_HEIGHT   :: 800;

window_should_close := false;

the_window:     Window;
the_renderer:   Renderer;

window_width: int32;
window_height: int32;

open_video_system: ()
{
    window_flags := 0; // @Reconsider - WINDOW_RESIZABLE
    the_window = create_window(window_flags);
    the_renderer = create_renderer(the_window);

    set_window_size        (the_window, INITIAL_WINDOW_WIDTH, INITIAL_WINDOW_HEIGHT);
    set_window_fullscreen  (the_window, WINDOW_WINDOWED);
    set_window_position    (the_window, WINDOW_POSITION_CENTERED, WINDOW_POSITION_CENTERED);
    set_window_title       (the_window, WINDOW_TITLE);

    show_window(the_window);
}

close_video_system: ()
{
    delete_renderer(the_renderer);
    delete_window(the_window);
}

handle_events: ()
{
    get_window_size(the_window, &window_width, &window_height);

    event: Event;
    while poll_event(&event)
    {
        switch event.event_type
        {
        case EVENT_QUIT then
            window_should_close = true;
        case EVENT_MOUSE_BUTTON_DOWN
        {
            mouse_event := cast(*Mouse_Button_Event) &event;
            if mouse_event.button == MOUSE_BUTTON_LEFT then
                on_mouse_press(mouse_event.x, window_height - mouse_event.y);
        }
        }
    }
}

render: ()
{
    render_set_color(the_renderer, 36, 147, 68, 255);
    render_clear(the_renderer);

    render_set_color(the_renderer, 255, 128, 0, 255);
    foreach vector, index in field
    {
        x := (index % field_width) * FIELD_DENSITY;
        y := (index / field_width) * FIELD_DENSITY;
        dx := cast(int32)(vector.x * METERS_TO_PIXELS + 0.5);
        dy := cast(int32)(vector.y * METERS_TO_PIXELS + 0.5);
        render_draw_line(the_renderer, x, window_height - y, x + dx, window_height - (y + dy));
    }

    render_set_color(the_renderer, 255, 255, 255, 255);
    foreach point in points
    {
        x :=                 cast(int32)(point.x * METERS_TO_PIXELS);
        y := window_height - cast(int32)(point.y * METERS_TO_PIXELS);
        render_fill_rect(the_renderer, x - 4, y - 4, 9, 9);
    }

    render_swap_window(the_renderer);
}
